import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(home: Scaffold(body: GameBoard()));
  }
}

class GameBoard extends StatefulWidget {
  @override
  _GameBoardState createState() => _GameBoardState();
}

class _GameBoardState extends State<GameBoard> {
  @override
  Widget build(BuildContext context) {
    double tableSize = (MediaQuery.of(context).size.width) / 2;
    return MaterialApp(
      title: 'Supa basic widget',
      home: Scaffold(
        body: GestureDetector(
          child: CustomPaint(
            size: Size(tableSize, tableSize),
            painter: oxtableline(),
          ),
        ),
      ),
    );
  }
}

class oxtableline extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    paint.color = Colors.black87;
    paint.strokeWidth = 10;

    double widthmg = size.width / 3;
    double heightmg = size.height / 3;
    double y = 1;
    while (y < 3) {
      canvas.drawLine(
        Offset(0, heightmg * y),
        Offset(size.width, heightmg * y),
        paint,
      );
      y++;
    }

    double x = 1;
    while (x < 3) {
      canvas.drawLine(
        Offset(widthmg * x, 0),
        Offset(widthmg * x, size.height),
        paint,
      );
      x++;
    }
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    throw UnimplementedError();
  }
}

class paint_o extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    paint.color = Colors.blue;
    paint.style = PaintingStyle.stroke;
    paint.strokeWidth = 10;

    double table_box = size.width / 3;
    double radius = table_box / 3;
    Offset center = Offset(table_box / 2, table_box / 2);

    canvas.drawCircle(center, radius, paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    throw UnimplementedError();
  }
}

class paint_x extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    paint.color = Colors.redAccent;
    paint.strokeWidth = 10;
    paint.strokeCap = StrokeCap.round;
    double table_box = size.width / 3;
    double x_size = table_box / 2;
    canvas.drawLine(Offset(0, 0), Offset(x_size, x_size), paint);
    canvas.drawLine(Offset(x_size, 0), Offset(0, x_size), paint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) {
    throw UnimplementedError();
  }
}
