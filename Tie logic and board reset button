import 'package:flutter/material.dart';

void main() {
  runApp(MyApp());
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(home: Scaffold(body: GameBoard()));
  }
}

class GameBoard extends StatefulWidget {
  @override
  _GameBoardState createState() => _GameBoardState();
}

class _GameBoardState extends State<GameBoard> {
  List<List<String>> board = List.generate(
    3,
    (_) => List.generate(3, (_) => ""),
  );

  bool playerturn = false; // o is false, x is true

  String winner = "";

  void _tabletap(TapDownDetails details, double tablewidth) {
    double cellSize = tablewidth / 3;
    int col = (details.localPosition.dx / cellSize).floor();
    int row = (details.localPosition.dy / cellSize).floor();

    if (row >= 0 &&
        row < 3 &&
        col >= 0 &&
        col < 3 &&
        board[row][col] == '' &&
        !playerturn) {
      setState(() {
        board[row][col] = "O";
        playerturn = !playerturn;
      });
    }
    if (row >= 0 &&
        row < 3 &&
        col >= 0 &&
        col < 3 &&
        board[row][col] == '' &&
        playerturn) {
      setState(() {
        board[row][col] = "X";
        playerturn = !playerturn;
      });
    }
  }

  String playerText(bool player) {
    String player = "";
    if (!playerturn) {
      player = "O";
    } else {
      player = "X";
    }
    return player;
  }

  String showWinner(List<List<String>> board) {
    //แนวนอน
    int i = 0;
    while (i < 3) {
      if (board[i][0] != "" &&
          board[i][0] == board[i][1] &&
          board[i][1] == board[i][2]) {
        return board[i][0];
      }
      i += 1;
    }
    //แนวตั้ง
    int j = 0;
    while (j < 3) {
      if (board[0][j] != "" &&
          board[0][j] == board[1][j] &&
          board[1][j] == board[2][j]) {
        return board[0][j];
      }
      j += 1;
    }
    //ซัายบนลงขวาล่าง
    if (board[0][0] != "" &&
        board[0][0] == board[1][1] &&
        board[1][1] == board[2][2]) {
      return board[0][0];
    }
    //ซ้ายล่างขึ้นขวาบน
    if (board[0][2] != "" &&
        board[0][2] == board[1][1] &&
        board[1][1] == board[2][0]) {
      return board[0][2];
    }
    //เสมอ หรือ ยังไม่จบ
    int k = 0;
    while (k < 3) {
      int l = 0;
      while (l < 3) {
        if (board[k][l] == "") {
          return ""; //ยังไม่มีใครชนะ
        }
        l++;
      }
      k++;
    }

    return "Tie";
  }

  void clearboard() {
    setState(() {
      int i = 0;
      while (i < 3) {
        int j = 0;
        while (j < 3) {
          board[i][j] = "";
          j++;
        }
        i++;
      }
      winner = "";
      playerturn = false;
    });
  }

  @override
  Widget build(BuildContext context) {
    double tableSize = (MediaQuery.of(context).size.width);
    winner = showWinner(board);
    return MaterialApp(
      title: 'Supa basic widget',
      home: Scaffold(
        body: GestureDetector(
          onTapDown: (details) {
            if (winner == "") {
              _tabletap(details, tableSize);
            }
          },
          child: Column(
            children: [
              CustomPaint(
                size: Size(tableSize, tableSize),
                painter: oxtableline(board),
              ),
              SizedBox(height: tableSize / 10),
              Text(
                "Turn : ${playerText(playerturn)}",
                style: TextStyle(fontSize: 28),
              ),
              SizedBox(height: tableSize / 10),
              if (winner != "")
                Text("Winner : $winner", style: TextStyle(fontSize: 28)),
              SizedBox(height: tableSize / 10),
              if (winner != "")
                ElevatedButton(
                  onPressed: clearboard,
                  child: Text(
                    'Clear board',
                    style: TextStyle(fontSize: 28, color: Colors.black),
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}

class oxtableline extends CustomPainter {
  final List<List<String>> board;
  oxtableline(this.board);

  @override
  void paint(Canvas canvas, Size size) {
    final paint = Paint();
    paint.color = Colors.black87;
    paint.strokeWidth = 3;

    double widthmg = size.width / 3;
    double heightmg = size.height / 3;
    double y = 0;
    while (y <= 3) {
      canvas.drawLine(
        Offset(0, heightmg * y),
        Offset(size.width, heightmg * y),
        paint,
      );
      y++;
    }

    double x = 0;
    while (x <= 3) {
      canvas.drawLine(
        Offset(widthmg * x, 0),
        Offset(widthmg * x, size.height),
        paint,
      );
      x++;
    }

    int row = 0;
    while (row < 3) {
      int col = 0;
      while (col < 3) {
        if (board[row][col] == 'O') {
          final oPaint = Paint()
            ..color = Colors.blue
            ..style = PaintingStyle.stroke
            ..strokeWidth = 6;
          double cellSize = size.width / 3;

          final center = Offset(
            col * cellSize + cellSize / 2,
            row * cellSize + cellSize / 2,
          );
          final radius = cellSize / 3;
          canvas.drawCircle(center, radius, oPaint);
        }
        if (board[row][col] == 'X') {
          final xPaint = Paint()
            ..color = Colors.redAccent
            ..strokeCap = StrokeCap.round
            ..strokeWidth = 6;
          double cellSize = size.width / 3;
          final left = col * cellSize;
          final top = row * cellSize;
          final right = left + cellSize;
          final bottom = top + cellSize;
          final gap = cellSize / 5;
          canvas.drawLine(
            Offset(left + gap, top + gap),
            Offset(right - gap, bottom - gap),
            xPaint,
          );
          canvas.drawLine(
            Offset(right - gap, top + gap),
            Offset(left + gap, bottom - gap),
            xPaint,
          );
        }
        col++;
      }
      row++;
    }
  }

  @override
  bool shouldRepaint(CustomPainter oldDelegate) => true;
}
